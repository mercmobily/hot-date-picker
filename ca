<link rel="import" href="../polymer/polymer.html">
<link rel="import" href="../paper-input/paper-input.html">
<link rel="import" href="../paper-input/paper-input-error.html">
<link rel="import" href="../paper-dropdown-menu/paper-dropdown-menu.html">
<link rel="import" href="../paper-listbox/paper-listbox.html">
<link rel="import" href="../paper-item/paper-item.html">
<link rel="import" href="../iron-flex-layout/iron-flex-layout.html">
<link rel="import" href="../paper-styles/default-theme.html">
<link rel="import" href="../paper-styles/typography.html">
<link rel="import" href="../iron-form-element-behavior/iron-form-element-behavior.html">

<!--
`hot-date-picker`
Minimal date picker

@demo demo/index.html
-->

<dom-module id="hot-date-picker">
  <template>
    <style include="iron-flex">
      :host {
        display: block;
        padding: 8px 0;

        @apply(--hot-date-picker);

        --paper-input-container: {
          padding-top: 0; /* No space for input labels, since we don't have them */
        };
      }
      label {
        display: block;
        @apply(--paper-font-caption);
        color: var(--secondary-text-color);
      }
      .container {
        @apply(--layout-horizontal);
      }
      .day {
        @apply(--layout-flex-2);
        margin-right: 8px;
      }
      .month {
        @apply(--layout-flex-3);
        margin-right: 8px;

        --paper-input-container-input: {
          box-sizing: border-box;
          margin-bottom: -1px;
          border: 1px solid var(--paper-grey-400);
          border-right: 0;
          padding: 0.5rem;
        };
      }
      .year {
        @apply(--layout-flex-2);
      }
    </style>

    <label hidden$="[[!label]]">[[label]]</label>

    <div class="container">
      <paper-input id="day"
        class="day"
        maxlength="2"
        value="{{day}}"
        name="day"
        label="Day"
        allowed-pattern="\d"
        pattern="^\d\d?$"
        auto-validate
        no-label-float>
      </paper-input>

      <paper-dropdown-menu id="month"
          class="month"
          value="[[month]]"
          name="month"
          label="Month"
          no-label-float>
        <paper-listbox id="monthListbox" class="dropdown-content" attr-for-selected="value" selected="{{month}}">
          <paper-item value="01">Jan</paper-item>
          <paper-item value="02">Feb</paper-item>
          <paper-item value="03">Mar</paper-item>
          <paper-item value="04">Apr</paper-item>
          <paper-item value="05">May</paper-item>
          <paper-item value="06">June</paper-item>
          <paper-item value="07">July</paper-item>
          <paper-item value="08">Aug</paper-item>
          <paper-item value="09">Sep</paper-item>
          <paper-item value="10">Oct</paper-item>
          <paper-item value="11">Nov</paper-item>
          <paper-item value="12">Dec</paper-item>
        </paper-listbox>
      </paper-dropdown-menu>

      <paper-input id="year"
          class="year"
          maxlength="4"
          value="{{year}}"
          label="Year"
          auto-validate
          no-label-float>
      </paper-input>

      <paper-input-error aria-live="assertive" invalid>Stocazzo date picker</paper-input-error>
      <paper-input-error aria-live="assertive" invalid$="[[invalid]]">[[errorMessage]]</paper-input-error>

    </div>
  </template>

  <script>
    Polymer({
      is: 'hot-date-picker',

      properties: {
        day: String,
        month: String,
        year: String,
        invalid: {
          type: Boolean,
          default: false,
          observer: '_invalidChanged'
        },
      },

      behaviors: [
        Polymer.IronFormElementBehavior
      ],

      observers: [
        '_valueChanged(value)',
        '_dateChanged(day,month,year)',
      ],

      _oneFieldSet: function() {
        return !!(this.$.day.value || this.$.month.value || this.$.year.value);
      },

      ready: function() {
        var el = this;

        this.$.year.inputElement.validate = function() {
          // Value is empty: invalid if main element is required or one field
          // is set
          if (this.value === '') {
            this.invalid = !!el.required || el._oneFieldSet();
            return !this.invalid;
          }

          // It must be 4 characters
          if (this.value.length != 4) {
            this.invalid = true;
            return !this.invalid;
          }

          // All good
          this.invalid = false;
          return !this.invalid;
        };

        this.$.month.validate = function() {
          // Value will depend on selected month
          var value = el.$.monthListbox.selected;

          // Value is empty: invalid if main element is required or one field
          // is set
          if (!value || value === '') {
            this.invalid = !!el.required || el._oneFieldSet();
            return !this.invalid;
          }

          this.invalid = false;
          return !this.invalid;
        };

        this.$.day.inputElement.validate = function() {
          // Value is empty: invalid if main element is required or one field
          // is set
          if (this.value === '') {
            this.invalid = !!el.required || el._oneFieldSet();
            return !this.invalid;
          }

          var day = this.value;

          function numberOfDays(year, month) {
            var d = new Date(year, month, 0);
            return d.getDate();
          }

          // Day cannot be below 0 regardless
          if (day <= 0) {
            this.invalid = true;
            return !this.invalid;
          }

          // Month could be
          var month = el.$.monthListbox.selected;

          // We we don't have the month, we will go with a standard "31"
          if (!month) {
            if (day > 31) {
              this.invalid = true;
              return !this.invalid;
            }
          }

          // We have the month: doing "proper" validation, using a default
          // non-leap year if the year isn't available
          if (day > numberOfDays(el.year || 2001, month)) {
            this.invalid = true;
            return !this.invalid;
          }

          this.invalid = false;
          return !this.invalid;
        };
      },

      /*
       * Reflect changes to day, month or year back to the global element's value
       */
      _dateChanged: function() {
        this._protectDayMonthYear = true;

        if (!this.day || !this.month || !this.year) {
          this.value = '';
        } else {
          var formattedDay = this.day.length == 1 ? "0" + this.day : this.day;
          this.value = [this.year, this.month, formattedDay].join('-');
        }

        this.validate();
        this._protectDayMonthYear = false;
      },

      /*
       * Reflect changes to value back to day, month and year
       */
      _valueChanged: function(v) {
        var m;

        if (this._protectDayMonthYear) return;

        if (v && v.match) {
          if (m = v.match(/^(\d{4})-(\d{2})-(\d{2})$/m)) {
            this.day = m[3];
            this.month = m[2] ;
            this.year = m[1];
          }
        } else {
          this.day ='';
          this.month = '';
          this.year = '';
        }

        this.validate();
      },

      /*
       * If invalid is set to "true", it will artificially invalidate _all_ fields
       */
      _invalidChanged: function() {
        this.$.day.invalid = this.invalid || false;
        this.$.month.invalid = this.invalid || false;
        this.$.year.invalid = this.invalid || false;
      },

      /*
       * Validate function; validation is TOTALLY delegated to the
       * sub-elements. They will do all of work of checking if they should be
       * set (if the parent is required, or if at least ONE sibling is set)
       */
      validate: function() {
        this.$.day.validate();
        this.$.month.validate();
        this.$.year.validate();

        // It's set as invalid if any one of the fields is invalid
        this.invalid = this.$.day.invalid || this.$.month.invalid || this.$.year.invalid;
        return !this.invalid;
      }

    });
  </script>
</dom-module>
